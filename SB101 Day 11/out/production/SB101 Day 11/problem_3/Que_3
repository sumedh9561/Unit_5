

 Q3/- What is the Serialization and deseiralization in Java?

 Ans ==>

   Serialization :

      1) Serialization is a mechanism of converting the state of an object into a byte stream.
         This mechanism is used to persist the object.
      2) The byte stream created is platform independent. So, the object serialized on one platform can be deserialized on a different platform.
      3) To make a Java object serializable we implement the java.io.Serializable interface.
      4) We use Java to create objects. These objects are stored in memory and removed by the garbage collector once they’re no longer being used.
         If we want to transfer an object and, for instance, store it on a disk or send it over a network, we need to transform it into a byte stream.
         To do this, the class of that object needs to implement the Serializable interface. As we discussed earlier, serialization allows us to
         convert the state of an object into a byte stream. This byte stream does not contain the actual code.
      5) Working :
         Java serialization uses reflection to scrape all necessary data from the object’s fields, including private and final fields. If a field contains
         an object, that object is serialized recursively. Even though you might have getters and setters, these functions are not used when serializing
         an object in Java.

   Deserialization :

     1) is the reverse process where the byte stream is used to recreate the actual Java object in memory.
        This mechanism is used to persist the object.
     2) Deserialization is precisely the opposite of serialization. With deserialization, you start with a byte stream and re-create the object you
        previously serialized in its original state. However, you must have the definition of the object to successfully re-create it.
     3) Working :
        When deserializing a byte stream back to an object it does not use the constructor. It simply creates an empty object and uses reflection to
        write the data to the fields. Just like with serialization, private and final fields are also included.





